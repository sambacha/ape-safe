# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SafeMultisigConfirmationResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, owner: str=None, submission_date: datetime=None, transaction_hash: str=None, confirmation_type: str=None, signature: str=None, signature_type: str=None):  # noqa: E501
        """SafeMultisigConfirmationResponse - a model defined in Swagger

        :param owner: The owner of this SafeMultisigConfirmationResponse.  # noqa: E501
        :type owner: str
        :param submission_date: The submission_date of this SafeMultisigConfirmationResponse.  # noqa: E501
        :type submission_date: datetime
        :param transaction_hash: The transaction_hash of this SafeMultisigConfirmationResponse.  # noqa: E501
        :type transaction_hash: str
        :param confirmation_type: The confirmation_type of this SafeMultisigConfirmationResponse.  # noqa: E501
        :type confirmation_type: str
        :param signature: The signature of this SafeMultisigConfirmationResponse.  # noqa: E501
        :type signature: str
        :param signature_type: The signature_type of this SafeMultisigConfirmationResponse.  # noqa: E501
        :type signature_type: str
        """
        self.swagger_types = {
            'owner': str,
            'submission_date': datetime,
            'transaction_hash': str,
            'confirmation_type': str,
            'signature': str,
            'signature_type': str
        }

        self.attribute_map = {
            'owner': 'owner',
            'submission_date': 'submissionDate',
            'transaction_hash': 'transactionHash',
            'confirmation_type': 'confirmationType',
            'signature': 'signature',
            'signature_type': 'signatureType'
        }

        self._owner = owner
        self._submission_date = submission_date
        self._transaction_hash = transaction_hash
        self._confirmation_type = confirmation_type
        self._signature = signature
        self._signature_type = signature_type

    @classmethod
    def from_dict(cls, dikt) -> 'SafeMultisigConfirmationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SafeMultisigConfirmationResponse of this SafeMultisigConfirmationResponse.  # noqa: E501
        :rtype: SafeMultisigConfirmationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def owner(self) -> str:
        """Gets the owner of this SafeMultisigConfirmationResponse.


        :return: The owner of this SafeMultisigConfirmationResponse.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner: str):
        """Sets the owner of this SafeMultisigConfirmationResponse.


        :param owner: The owner of this SafeMultisigConfirmationResponse.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501
        if owner is not None and len(owner) > 42:
            raise ValueError("Invalid value for `owner`, length must be less than or equal to `42`")  # noqa: E501
        if owner is not None and len(owner) < 1:
            raise ValueError("Invalid value for `owner`, length must be greater than or equal to `1`")  # noqa: E501

        self._owner = owner

    @property
    def submission_date(self) -> datetime:
        """Gets the submission_date of this SafeMultisigConfirmationResponse.


        :return: The submission_date of this SafeMultisigConfirmationResponse.
        :rtype: datetime
        """
        return self._submission_date

    @submission_date.setter
    def submission_date(self, submission_date: datetime):
        """Sets the submission_date of this SafeMultisigConfirmationResponse.


        :param submission_date: The submission_date of this SafeMultisigConfirmationResponse.
        :type submission_date: datetime
        """
        if submission_date is None:
            raise ValueError("Invalid value for `submission_date`, must not be `None`")  # noqa: E501

        self._submission_date = submission_date

    @property
    def transaction_hash(self) -> str:
        """Gets the transaction_hash of this SafeMultisigConfirmationResponse.


        :return: The transaction_hash of this SafeMultisigConfirmationResponse.
        :rtype: str
        """
        return self._transaction_hash

    @transaction_hash.setter
    def transaction_hash(self, transaction_hash: str):
        """Sets the transaction_hash of this SafeMultisigConfirmationResponse.


        :param transaction_hash: The transaction_hash of this SafeMultisigConfirmationResponse.
        :type transaction_hash: str
        """

        self._transaction_hash = transaction_hash

    @property
    def confirmation_type(self) -> str:
        """Gets the confirmation_type of this SafeMultisigConfirmationResponse.


        :return: The confirmation_type of this SafeMultisigConfirmationResponse.
        :rtype: str
        """
        return self._confirmation_type

    @confirmation_type.setter
    def confirmation_type(self, confirmation_type: str):
        """Sets the confirmation_type of this SafeMultisigConfirmationResponse.


        :param confirmation_type: The confirmation_type of this SafeMultisigConfirmationResponse.
        :type confirmation_type: str
        """

        self._confirmation_type = confirmation_type

    @property
    def signature(self) -> str:
        """Gets the signature of this SafeMultisigConfirmationResponse.


        :return: The signature of this SafeMultisigConfirmationResponse.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature: str):
        """Sets the signature of this SafeMultisigConfirmationResponse.


        :param signature: The signature of this SafeMultisigConfirmationResponse.
        :type signature: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")  # noqa: E501

        self._signature = signature

    @property
    def signature_type(self) -> str:
        """Gets the signature_type of this SafeMultisigConfirmationResponse.


        :return: The signature_type of this SafeMultisigConfirmationResponse.
        :rtype: str
        """
        return self._signature_type

    @signature_type.setter
    def signature_type(self, signature_type: str):
        """Sets the signature_type of this SafeMultisigConfirmationResponse.


        :param signature_type: The signature_type of this SafeMultisigConfirmationResponse.
        :type signature_type: str
        """

        self._signature_type = signature_type
