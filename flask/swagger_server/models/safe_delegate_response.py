# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SafeDelegateResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, delegate: str=None, delegator: str=None, label: str=None):  # noqa: E501
        """SafeDelegateResponse - a model defined in Swagger

        :param delegate: The delegate of this SafeDelegateResponse.  # noqa: E501
        :type delegate: str
        :param delegator: The delegator of this SafeDelegateResponse.  # noqa: E501
        :type delegator: str
        :param label: The label of this SafeDelegateResponse.  # noqa: E501
        :type label: str
        """
        self.swagger_types = {
            'delegate': str,
            'delegator': str,
            'label': str
        }

        self.attribute_map = {
            'delegate': 'delegate',
            'delegator': 'delegator',
            'label': 'label'
        }

        self._delegate = delegate
        self._delegator = delegator
        self._label = label

    @classmethod
    def from_dict(cls, dikt) -> 'SafeDelegateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SafeDelegateResponse of this SafeDelegateResponse.  # noqa: E501
        :rtype: SafeDelegateResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delegate(self) -> str:
        """Gets the delegate of this SafeDelegateResponse.


        :return: The delegate of this SafeDelegateResponse.
        :rtype: str
        """
        return self._delegate

    @delegate.setter
    def delegate(self, delegate: str):
        """Sets the delegate of this SafeDelegateResponse.


        :param delegate: The delegate of this SafeDelegateResponse.
        :type delegate: str
        """
        if delegate is None:
            raise ValueError("Invalid value for `delegate`, must not be `None`")  # noqa: E501

        self._delegate = delegate

    @property
    def delegator(self) -> str:
        """Gets the delegator of this SafeDelegateResponse.


        :return: The delegator of this SafeDelegateResponse.
        :rtype: str
        """
        return self._delegator

    @delegator.setter
    def delegator(self, delegator: str):
        """Sets the delegator of this SafeDelegateResponse.


        :param delegator: The delegator of this SafeDelegateResponse.
        :type delegator: str
        """
        if delegator is None:
            raise ValueError("Invalid value for `delegator`, must not be `None`")  # noqa: E501

        self._delegator = delegator

    @property
    def label(self) -> str:
        """Gets the label of this SafeDelegateResponse.


        :return: The label of this SafeDelegateResponse.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this SafeDelegateResponse.


        :param label: The label of this SafeDelegateResponse.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501
        if label is not None and len(label) > 50:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `50`")  # noqa: E501
        if label is not None and len(label) < 1:
            raise ValueError("Invalid value for `label`, length must be greater than or equal to `1`")  # noqa: E501

        self._label = label
