# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class EthereumTxWithTransfersResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, execution_date: datetime=None, to: str=None, data: str=None, tx_hash: str=None, block_number: str=None, transfers: List[TransferWithTokenInfoResponse]=None, tx_type: str=None, _from: str=None):  # noqa: E501
        """EthereumTxWithTransfersResponse - a model defined in Swagger

        :param execution_date: The execution_date of this EthereumTxWithTransfersResponse.  # noqa: E501
        :type execution_date: datetime
        :param to: The to of this EthereumTxWithTransfersResponse.  # noqa: E501
        :type to: str
        :param data: The data of this EthereumTxWithTransfersResponse.  # noqa: E501
        :type data: str
        :param tx_hash: The tx_hash of this EthereumTxWithTransfersResponse.  # noqa: E501
        :type tx_hash: str
        :param block_number: The block_number of this EthereumTxWithTransfersResponse.  # noqa: E501
        :type block_number: str
        :param transfers: The transfers of this EthereumTxWithTransfersResponse.  # noqa: E501
        :type transfers: List[TransferWithTokenInfoResponse]
        :param tx_type: The tx_type of this EthereumTxWithTransfersResponse.  # noqa: E501
        :type tx_type: str
        :param _from: The _from of this EthereumTxWithTransfersResponse.  # noqa: E501
        :type _from: str
        """
        self.swagger_types = {
            'execution_date': datetime,
            'to': str,
            'data': str,
            'tx_hash': str,
            'block_number': str,
            'transfers': List[TransferWithTokenInfoResponse],
            'tx_type': str,
            '_from': str
        }

        self.attribute_map = {
            'execution_date': 'executionDate',
            'to': 'to',
            'data': 'data',
            'tx_hash': 'txHash',
            'block_number': 'blockNumber',
            'transfers': 'transfers',
            'tx_type': 'txType',
            '_from': 'from'
        }

        self._execution_date = execution_date
        self._to = to
        self._data = data
        self._tx_hash = tx_hash
        self._block_number = block_number
        self._transfers = transfers
        self._tx_type = tx_type
        self.__from = _from

    @classmethod
    def from_dict(cls, dikt) -> 'EthereumTxWithTransfersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EthereumTxWithTransfersResponse of this EthereumTxWithTransfersResponse.  # noqa: E501
        :rtype: EthereumTxWithTransfersResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def execution_date(self) -> datetime:
        """Gets the execution_date of this EthereumTxWithTransfersResponse.


        :return: The execution_date of this EthereumTxWithTransfersResponse.
        :rtype: datetime
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date: datetime):
        """Sets the execution_date of this EthereumTxWithTransfersResponse.


        :param execution_date: The execution_date of this EthereumTxWithTransfersResponse.
        :type execution_date: datetime
        """
        if execution_date is None:
            raise ValueError("Invalid value for `execution_date`, must not be `None`")  # noqa: E501

        self._execution_date = execution_date

    @property
    def to(self) -> str:
        """Gets the to of this EthereumTxWithTransfersResponse.


        :return: The to of this EthereumTxWithTransfersResponse.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this EthereumTxWithTransfersResponse.


        :param to: The to of this EthereumTxWithTransfersResponse.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def data(self) -> str:
        """Gets the data of this EthereumTxWithTransfersResponse.


        :return: The data of this EthereumTxWithTransfersResponse.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this EthereumTxWithTransfersResponse.


        :param data: The data of this EthereumTxWithTransfersResponse.
        :type data: str
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")  # noqa: E501

        self._data = data

    @property
    def tx_hash(self) -> str:
        """Gets the tx_hash of this EthereumTxWithTransfersResponse.


        :return: The tx_hash of this EthereumTxWithTransfersResponse.
        :rtype: str
        """
        return self._tx_hash

    @tx_hash.setter
    def tx_hash(self, tx_hash: str):
        """Sets the tx_hash of this EthereumTxWithTransfersResponse.


        :param tx_hash: The tx_hash of this EthereumTxWithTransfersResponse.
        :type tx_hash: str
        """
        if tx_hash is None:
            raise ValueError("Invalid value for `tx_hash`, must not be `None`")  # noqa: E501

        self._tx_hash = tx_hash

    @property
    def block_number(self) -> str:
        """Gets the block_number of this EthereumTxWithTransfersResponse.


        :return: The block_number of this EthereumTxWithTransfersResponse.
        :rtype: str
        """
        return self._block_number

    @block_number.setter
    def block_number(self, block_number: str):
        """Sets the block_number of this EthereumTxWithTransfersResponse.


        :param block_number: The block_number of this EthereumTxWithTransfersResponse.
        :type block_number: str
        """

        self._block_number = block_number

    @property
    def transfers(self) -> List[TransferWithTokenInfoResponse]:
        """Gets the transfers of this EthereumTxWithTransfersResponse.


        :return: The transfers of this EthereumTxWithTransfersResponse.
        :rtype: List[TransferWithTokenInfoResponse]
        """
        return self._transfers

    @transfers.setter
    def transfers(self, transfers: List[TransferWithTokenInfoResponse]):
        """Sets the transfers of this EthereumTxWithTransfersResponse.


        :param transfers: The transfers of this EthereumTxWithTransfersResponse.
        :type transfers: List[TransferWithTokenInfoResponse]
        """
        if transfers is None:
            raise ValueError("Invalid value for `transfers`, must not be `None`")  # noqa: E501

        self._transfers = transfers

    @property
    def tx_type(self) -> str:
        """Gets the tx_type of this EthereumTxWithTransfersResponse.


        :return: The tx_type of this EthereumTxWithTransfersResponse.
        :rtype: str
        """
        return self._tx_type

    @tx_type.setter
    def tx_type(self, tx_type: str):
        """Sets the tx_type of this EthereumTxWithTransfersResponse.


        :param tx_type: The tx_type of this EthereumTxWithTransfersResponse.
        :type tx_type: str
        """

        self._tx_type = tx_type

    @property
    def _from(self) -> str:
        """Gets the _from of this EthereumTxWithTransfersResponse.


        :return: The _from of this EthereumTxWithTransfersResponse.
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from: str):
        """Sets the _from of this EthereumTxWithTransfersResponse.


        :param _from: The _from of this EthereumTxWithTransfersResponse.
        :type _from: str
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from
