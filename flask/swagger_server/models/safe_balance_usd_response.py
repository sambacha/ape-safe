# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SafeBalanceUsdResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, token_address: str=None, token: Erc20Info=None, balance: str=None, fiat_balance: str=None, fiat_conversion: str=None, fiat_code: str=None):  # noqa: E501
        """SafeBalanceUsdResponse - a model defined in Swagger

        :param token_address: The token_address of this SafeBalanceUsdResponse.  # noqa: E501
        :type token_address: str
        :param token: The token of this SafeBalanceUsdResponse.  # noqa: E501
        :type token: Erc20Info
        :param balance: The balance of this SafeBalanceUsdResponse.  # noqa: E501
        :type balance: str
        :param fiat_balance: The fiat_balance of this SafeBalanceUsdResponse.  # noqa: E501
        :type fiat_balance: str
        :param fiat_conversion: The fiat_conversion of this SafeBalanceUsdResponse.  # noqa: E501
        :type fiat_conversion: str
        :param fiat_code: The fiat_code of this SafeBalanceUsdResponse.  # noqa: E501
        :type fiat_code: str
        """
        self.swagger_types = {
            'token_address': str,
            'token': Erc20Info,
            'balance': str,
            'fiat_balance': str,
            'fiat_conversion': str,
            'fiat_code': str
        }

        self.attribute_map = {
            'token_address': 'tokenAddress',
            'token': 'token',
            'balance': 'balance',
            'fiat_balance': 'fiatBalance',
            'fiat_conversion': 'fiatConversion',
            'fiat_code': 'fiatCode'
        }

        self._token_address = token_address
        self._token = token
        self._balance = balance
        self._fiat_balance = fiat_balance
        self._fiat_conversion = fiat_conversion
        self._fiat_code = fiat_code

    @classmethod
    def from_dict(cls, dikt) -> 'SafeBalanceUsdResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SafeBalanceUsdResponse of this SafeBalanceUsdResponse.  # noqa: E501
        :rtype: SafeBalanceUsdResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_address(self) -> str:
        """Gets the token_address of this SafeBalanceUsdResponse.


        :return: The token_address of this SafeBalanceUsdResponse.
        :rtype: str
        """
        return self._token_address

    @token_address.setter
    def token_address(self, token_address: str):
        """Sets the token_address of this SafeBalanceUsdResponse.


        :param token_address: The token_address of this SafeBalanceUsdResponse.
        :type token_address: str
        """
        if token_address is None:
            raise ValueError("Invalid value for `token_address`, must not be `None`")  # noqa: E501
        if token_address is not None and len(token_address) < 1:
            raise ValueError("Invalid value for `token_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._token_address = token_address

    @property
    def token(self) -> Erc20Info:
        """Gets the token of this SafeBalanceUsdResponse.


        :return: The token of this SafeBalanceUsdResponse.
        :rtype: Erc20Info
        """
        return self._token

    @token.setter
    def token(self, token: Erc20Info):
        """Sets the token of this SafeBalanceUsdResponse.


        :param token: The token of this SafeBalanceUsdResponse.
        :type token: Erc20Info
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def balance(self) -> str:
        """Gets the balance of this SafeBalanceUsdResponse.


        :return: The balance of this SafeBalanceUsdResponse.
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance: str):
        """Sets the balance of this SafeBalanceUsdResponse.


        :param balance: The balance of this SafeBalanceUsdResponse.
        :type balance: str
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501
        if balance is not None and len(balance) < 1:
            raise ValueError("Invalid value for `balance`, length must be greater than or equal to `1`")  # noqa: E501

        self._balance = balance

    @property
    def fiat_balance(self) -> str:
        """Gets the fiat_balance of this SafeBalanceUsdResponse.


        :return: The fiat_balance of this SafeBalanceUsdResponse.
        :rtype: str
        """
        return self._fiat_balance

    @fiat_balance.setter
    def fiat_balance(self, fiat_balance: str):
        """Sets the fiat_balance of this SafeBalanceUsdResponse.


        :param fiat_balance: The fiat_balance of this SafeBalanceUsdResponse.
        :type fiat_balance: str
        """
        if fiat_balance is None:
            raise ValueError("Invalid value for `fiat_balance`, must not be `None`")  # noqa: E501
        if fiat_balance is not None and len(fiat_balance) < 1:
            raise ValueError("Invalid value for `fiat_balance`, length must be greater than or equal to `1`")  # noqa: E501

        self._fiat_balance = fiat_balance

    @property
    def fiat_conversion(self) -> str:
        """Gets the fiat_conversion of this SafeBalanceUsdResponse.


        :return: The fiat_conversion of this SafeBalanceUsdResponse.
        :rtype: str
        """
        return self._fiat_conversion

    @fiat_conversion.setter
    def fiat_conversion(self, fiat_conversion: str):
        """Sets the fiat_conversion of this SafeBalanceUsdResponse.


        :param fiat_conversion: The fiat_conversion of this SafeBalanceUsdResponse.
        :type fiat_conversion: str
        """
        if fiat_conversion is None:
            raise ValueError("Invalid value for `fiat_conversion`, must not be `None`")  # noqa: E501
        if fiat_conversion is not None and len(fiat_conversion) < 1:
            raise ValueError("Invalid value for `fiat_conversion`, length must be greater than or equal to `1`")  # noqa: E501

        self._fiat_conversion = fiat_conversion

    @property
    def fiat_code(self) -> str:
        """Gets the fiat_code of this SafeBalanceUsdResponse.


        :return: The fiat_code of this SafeBalanceUsdResponse.
        :rtype: str
        """
        return self._fiat_code

    @fiat_code.setter
    def fiat_code(self, fiat_code: str):
        """Sets the fiat_code of this SafeBalanceUsdResponse.


        :param fiat_code: The fiat_code of this SafeBalanceUsdResponse.
        :type fiat_code: str
        """
        if fiat_code is None:
            raise ValueError("Invalid value for `fiat_code`, must not be `None`")  # noqa: E501
        if fiat_code is not None and len(fiat_code) < 1:
            raise ValueError("Invalid value for `fiat_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._fiat_code = fiat_code
