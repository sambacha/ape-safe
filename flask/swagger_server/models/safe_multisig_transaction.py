# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SafeMultisigTransaction(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, safe: str=None, to: str=None, value: int=None, data: str=None, operation: int=None, gas_token: str=None, safe_tx_gas: int=None, base_gas: int=None, gas_price: int=None, refund_receiver: str=None, nonce: int=None, contract_transaction_hash: str=None, sender: str=None, signature: str=None, origin: str=None):  # noqa: E501
        """SafeMultisigTransaction - a model defined in Swagger

        :param safe: The safe of this SafeMultisigTransaction.  # noqa: E501
        :type safe: str
        :param to: The to of this SafeMultisigTransaction.  # noqa: E501
        :type to: str
        :param value: The value of this SafeMultisigTransaction.  # noqa: E501
        :type value: int
        :param data: The data of this SafeMultisigTransaction.  # noqa: E501
        :type data: str
        :param operation: The operation of this SafeMultisigTransaction.  # noqa: E501
        :type operation: int
        :param gas_token: The gas_token of this SafeMultisigTransaction.  # noqa: E501
        :type gas_token: str
        :param safe_tx_gas: The safe_tx_gas of this SafeMultisigTransaction.  # noqa: E501
        :type safe_tx_gas: int
        :param base_gas: The base_gas of this SafeMultisigTransaction.  # noqa: E501
        :type base_gas: int
        :param gas_price: The gas_price of this SafeMultisigTransaction.  # noqa: E501
        :type gas_price: int
        :param refund_receiver: The refund_receiver of this SafeMultisigTransaction.  # noqa: E501
        :type refund_receiver: str
        :param nonce: The nonce of this SafeMultisigTransaction.  # noqa: E501
        :type nonce: int
        :param contract_transaction_hash: The contract_transaction_hash of this SafeMultisigTransaction.  # noqa: E501
        :type contract_transaction_hash: str
        :param sender: The sender of this SafeMultisigTransaction.  # noqa: E501
        :type sender: str
        :param signature: The signature of this SafeMultisigTransaction.  # noqa: E501
        :type signature: str
        :param origin: The origin of this SafeMultisigTransaction.  # noqa: E501
        :type origin: str
        """
        self.swagger_types = {
            'safe': str,
            'to': str,
            'value': int,
            'data': str,
            'operation': int,
            'gas_token': str,
            'safe_tx_gas': int,
            'base_gas': int,
            'gas_price': int,
            'refund_receiver': str,
            'nonce': int,
            'contract_transaction_hash': str,
            'sender': str,
            'signature': str,
            'origin': str
        }

        self.attribute_map = {
            'safe': 'safe',
            'to': 'to',
            'value': 'value',
            'data': 'data',
            'operation': 'operation',
            'gas_token': 'gasToken',
            'safe_tx_gas': 'safeTxGas',
            'base_gas': 'baseGas',
            'gas_price': 'gasPrice',
            'refund_receiver': 'refundReceiver',
            'nonce': 'nonce',
            'contract_transaction_hash': 'contractTransactionHash',
            'sender': 'sender',
            'signature': 'signature',
            'origin': 'origin'
        }

        self._safe = safe
        self._to = to
        self._value = value
        self._data = data
        self._operation = operation
        self._gas_token = gas_token
        self._safe_tx_gas = safe_tx_gas
        self._base_gas = base_gas
        self._gas_price = gas_price
        self._refund_receiver = refund_receiver
        self._nonce = nonce
        self._contract_transaction_hash = contract_transaction_hash
        self._sender = sender
        self._signature = signature
        self._origin = origin

    @classmethod
    def from_dict(cls, dikt) -> 'SafeMultisigTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SafeMultisigTransaction of this SafeMultisigTransaction.  # noqa: E501
        :rtype: SafeMultisigTransaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def safe(self) -> str:
        """Gets the safe of this SafeMultisigTransaction.


        :return: The safe of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._safe

    @safe.setter
    def safe(self, safe: str):
        """Sets the safe of this SafeMultisigTransaction.


        :param safe: The safe of this SafeMultisigTransaction.
        :type safe: str
        """
        if safe is None:
            raise ValueError("Invalid value for `safe`, must not be `None`")  # noqa: E501

        self._safe = safe

    @property
    def to(self) -> str:
        """Gets the to of this SafeMultisigTransaction.


        :return: The to of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this SafeMultisigTransaction.


        :param to: The to of this SafeMultisigTransaction.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def value(self) -> int:
        """Gets the value of this SafeMultisigTransaction.


        :return: The value of this SafeMultisigTransaction.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this SafeMultisigTransaction.


        :param value: The value of this SafeMultisigTransaction.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and value < 0:  # noqa: E501
            raise ValueError("Invalid value for `value`, must be a value greater than or equal to `0`")  # noqa: E501

        self._value = value

    @property
    def data(self) -> str:
        """Gets the data of this SafeMultisigTransaction.


        :return: The data of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this SafeMultisigTransaction.


        :param data: The data of this SafeMultisigTransaction.
        :type data: str
        """

        self._data = data

    @property
    def operation(self) -> int:
        """Gets the operation of this SafeMultisigTransaction.


        :return: The operation of this SafeMultisigTransaction.
        :rtype: int
        """
        return self._operation

    @operation.setter
    def operation(self, operation: int):
        """Sets the operation of this SafeMultisigTransaction.


        :param operation: The operation of this SafeMultisigTransaction.
        :type operation: int
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        if operation is not None and operation < 0:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must be a value greater than or equal to `0`")  # noqa: E501

        self._operation = operation

    @property
    def gas_token(self) -> str:
        """Gets the gas_token of this SafeMultisigTransaction.


        :return: The gas_token of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._gas_token

    @gas_token.setter
    def gas_token(self, gas_token: str):
        """Sets the gas_token of this SafeMultisigTransaction.


        :param gas_token: The gas_token of this SafeMultisigTransaction.
        :type gas_token: str
        """

        self._gas_token = gas_token

    @property
    def safe_tx_gas(self) -> int:
        """Gets the safe_tx_gas of this SafeMultisigTransaction.


        :return: The safe_tx_gas of this SafeMultisigTransaction.
        :rtype: int
        """
        return self._safe_tx_gas

    @safe_tx_gas.setter
    def safe_tx_gas(self, safe_tx_gas: int):
        """Sets the safe_tx_gas of this SafeMultisigTransaction.


        :param safe_tx_gas: The safe_tx_gas of this SafeMultisigTransaction.
        :type safe_tx_gas: int
        """
        if safe_tx_gas is None:
            raise ValueError("Invalid value for `safe_tx_gas`, must not be `None`")  # noqa: E501
        if safe_tx_gas is not None and safe_tx_gas < 0:  # noqa: E501
            raise ValueError("Invalid value for `safe_tx_gas`, must be a value greater than or equal to `0`")  # noqa: E501

        self._safe_tx_gas = safe_tx_gas

    @property
    def base_gas(self) -> int:
        """Gets the base_gas of this SafeMultisigTransaction.


        :return: The base_gas of this SafeMultisigTransaction.
        :rtype: int
        """
        return self._base_gas

    @base_gas.setter
    def base_gas(self, base_gas: int):
        """Sets the base_gas of this SafeMultisigTransaction.


        :param base_gas: The base_gas of this SafeMultisigTransaction.
        :type base_gas: int
        """
        if base_gas is None:
            raise ValueError("Invalid value for `base_gas`, must not be `None`")  # noqa: E501
        if base_gas is not None and base_gas < 0:  # noqa: E501
            raise ValueError("Invalid value for `base_gas`, must be a value greater than or equal to `0`")  # noqa: E501

        self._base_gas = base_gas

    @property
    def gas_price(self) -> int:
        """Gets the gas_price of this SafeMultisigTransaction.


        :return: The gas_price of this SafeMultisigTransaction.
        :rtype: int
        """
        return self._gas_price

    @gas_price.setter
    def gas_price(self, gas_price: int):
        """Sets the gas_price of this SafeMultisigTransaction.


        :param gas_price: The gas_price of this SafeMultisigTransaction.
        :type gas_price: int
        """
        if gas_price is None:
            raise ValueError("Invalid value for `gas_price`, must not be `None`")  # noqa: E501
        if gas_price is not None and gas_price < 0:  # noqa: E501
            raise ValueError("Invalid value for `gas_price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._gas_price = gas_price

    @property
    def refund_receiver(self) -> str:
        """Gets the refund_receiver of this SafeMultisigTransaction.


        :return: The refund_receiver of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._refund_receiver

    @refund_receiver.setter
    def refund_receiver(self, refund_receiver: str):
        """Sets the refund_receiver of this SafeMultisigTransaction.


        :param refund_receiver: The refund_receiver of this SafeMultisigTransaction.
        :type refund_receiver: str
        """

        self._refund_receiver = refund_receiver

    @property
    def nonce(self) -> int:
        """Gets the nonce of this SafeMultisigTransaction.


        :return: The nonce of this SafeMultisigTransaction.
        :rtype: int
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce: int):
        """Sets the nonce of this SafeMultisigTransaction.


        :param nonce: The nonce of this SafeMultisigTransaction.
        :type nonce: int
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")  # noqa: E501
        if nonce is not None and nonce < 0:  # noqa: E501
            raise ValueError("Invalid value for `nonce`, must be a value greater than or equal to `0`")  # noqa: E501

        self._nonce = nonce

    @property
    def contract_transaction_hash(self) -> str:
        """Gets the contract_transaction_hash of this SafeMultisigTransaction.


        :return: The contract_transaction_hash of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._contract_transaction_hash

    @contract_transaction_hash.setter
    def contract_transaction_hash(self, contract_transaction_hash: str):
        """Sets the contract_transaction_hash of this SafeMultisigTransaction.


        :param contract_transaction_hash: The contract_transaction_hash of this SafeMultisigTransaction.
        :type contract_transaction_hash: str
        """
        if contract_transaction_hash is None:
            raise ValueError("Invalid value for `contract_transaction_hash`, must not be `None`")  # noqa: E501

        self._contract_transaction_hash = contract_transaction_hash

    @property
    def sender(self) -> str:
        """Gets the sender of this SafeMultisigTransaction.


        :return: The sender of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender: str):
        """Sets the sender of this SafeMultisigTransaction.


        :param sender: The sender of this SafeMultisigTransaction.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def signature(self) -> str:
        """Gets the signature of this SafeMultisigTransaction.


        :return: The signature of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature: str):
        """Sets the signature of this SafeMultisigTransaction.


        :param signature: The signature of this SafeMultisigTransaction.
        :type signature: str
        """

        self._signature = signature

    @property
    def origin(self) -> str:
        """Gets the origin of this SafeMultisigTransaction.


        :return: The origin of this SafeMultisigTransaction.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin: str):
        """Sets the origin of this SafeMultisigTransaction.


        :param origin: The origin of this SafeMultisigTransaction.
        :type origin: str
        """
        if origin is not None and len(origin) > 200:
            raise ValueError("Invalid value for `origin`, length must be less than or equal to `200`")  # noqa: E501
        if origin is not None and len(origin) < 1:
            raise ValueError("Invalid value for `origin`, length must be greater than or equal to `1`")  # noqa: E501

        self._origin = origin
