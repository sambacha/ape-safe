# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AllTransactionsSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, tx_type1: SafeModuleTransactionWithTransfersResponse=None, tx_type2: SafeMultisigTransactionWithTransfersResponse=None, tx_type3: EthereumTxWithTransfersResponse=None):  # noqa: E501
        """AllTransactionsSchema - a model defined in Swagger

        :param tx_type1: The tx_type1 of this AllTransactionsSchema.  # noqa: E501
        :type tx_type1: SafeModuleTransactionWithTransfersResponse
        :param tx_type2: The tx_type2 of this AllTransactionsSchema.  # noqa: E501
        :type tx_type2: SafeMultisigTransactionWithTransfersResponse
        :param tx_type3: The tx_type3 of this AllTransactionsSchema.  # noqa: E501
        :type tx_type3: EthereumTxWithTransfersResponse
        """
        self.swagger_types = {
            'tx_type1': SafeModuleTransactionWithTransfersResponse,
            'tx_type2': SafeMultisigTransactionWithTransfersResponse,
            'tx_type3': EthereumTxWithTransfersResponse
        }

        self.attribute_map = {
            'tx_type1': 'txType1',
            'tx_type2': 'txType2',
            'tx_type3': 'txType3'
        }

        self._tx_type1 = tx_type1
        self._tx_type2 = tx_type2
        self._tx_type3 = tx_type3

    @classmethod
    def from_dict(cls, dikt) -> 'AllTransactionsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _AllTransactionsSchema of this AllTransactionsSchema.  # noqa: E501
        :rtype: AllTransactionsSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tx_type1(self) -> SafeModuleTransactionWithTransfersResponse:
        """Gets the tx_type1 of this AllTransactionsSchema.


        :return: The tx_type1 of this AllTransactionsSchema.
        :rtype: SafeModuleTransactionWithTransfersResponse
        """
        return self._tx_type1

    @tx_type1.setter
    def tx_type1(self, tx_type1: SafeModuleTransactionWithTransfersResponse):
        """Sets the tx_type1 of this AllTransactionsSchema.


        :param tx_type1: The tx_type1 of this AllTransactionsSchema.
        :type tx_type1: SafeModuleTransactionWithTransfersResponse
        """
        if tx_type1 is None:
            raise ValueError("Invalid value for `tx_type1`, must not be `None`")  # noqa: E501

        self._tx_type1 = tx_type1

    @property
    def tx_type2(self) -> SafeMultisigTransactionWithTransfersResponse:
        """Gets the tx_type2 of this AllTransactionsSchema.


        :return: The tx_type2 of this AllTransactionsSchema.
        :rtype: SafeMultisigTransactionWithTransfersResponse
        """
        return self._tx_type2

    @tx_type2.setter
    def tx_type2(self, tx_type2: SafeMultisigTransactionWithTransfersResponse):
        """Sets the tx_type2 of this AllTransactionsSchema.


        :param tx_type2: The tx_type2 of this AllTransactionsSchema.
        :type tx_type2: SafeMultisigTransactionWithTransfersResponse
        """
        if tx_type2 is None:
            raise ValueError("Invalid value for `tx_type2`, must not be `None`")  # noqa: E501

        self._tx_type2 = tx_type2

    @property
    def tx_type3(self) -> EthereumTxWithTransfersResponse:
        """Gets the tx_type3 of this AllTransactionsSchema.


        :return: The tx_type3 of this AllTransactionsSchema.
        :rtype: EthereumTxWithTransfersResponse
        """
        return self._tx_type3

    @tx_type3.setter
    def tx_type3(self, tx_type3: EthereumTxWithTransfersResponse):
        """Sets the tx_type3 of this AllTransactionsSchema.


        :param tx_type3: The tx_type3 of this AllTransactionsSchema.
        :type tx_type3: EthereumTxWithTransfersResponse
        """
        if tx_type3 is None:
            raise ValueError("Invalid value for `tx_type3`, must not be `None`")  # noqa: E501

        self._tx_type3 = tx_type3
