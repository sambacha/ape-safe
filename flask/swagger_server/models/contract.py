# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Contract(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, name: str=None, display_name: str=None, logo_uri: str=None, contract_abi: ContractAbi=None):  # noqa: E501
        """Contract - a model defined in Swagger

        :param address: The address of this Contract.  # noqa: E501
        :type address: str
        :param name: The name of this Contract.  # noqa: E501
        :type name: str
        :param display_name: The display_name of this Contract.  # noqa: E501
        :type display_name: str
        :param logo_uri: The logo_uri of this Contract.  # noqa: E501
        :type logo_uri: str
        :param contract_abi: The contract_abi of this Contract.  # noqa: E501
        :type contract_abi: ContractAbi
        """
        self.swagger_types = {
            'address': str,
            'name': str,
            'display_name': str,
            'logo_uri': str,
            'contract_abi': ContractAbi
        }

        self.attribute_map = {
            'address': 'address',
            'name': 'name',
            'display_name': 'displayName',
            'logo_uri': 'logoUri',
            'contract_abi': 'contractAbi'
        }

        self._address = address
        self._name = name
        self._display_name = display_name
        self._logo_uri = logo_uri
        self._contract_abi = contract_abi

    @classmethod
    def from_dict(cls, dikt) -> 'Contract':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Contract of this Contract.  # noqa: E501
        :rtype: Contract
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this Contract.


        :return: The address of this Contract.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this Contract.


        :param address: The address of this Contract.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def name(self) -> str:
        """Gets the name of this Contract.


        :return: The name of this Contract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Contract.


        :param name: The name of this Contract.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def display_name(self) -> str:
        """Gets the display_name of this Contract.


        :return: The display_name of this Contract.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this Contract.


        :param display_name: The display_name of this Contract.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def logo_uri(self) -> str:
        """Gets the logo_uri of this Contract.


        :return: The logo_uri of this Contract.
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri: str):
        """Sets the logo_uri of this Contract.


        :param logo_uri: The logo_uri of this Contract.
        :type logo_uri: str
        """

        self._logo_uri = logo_uri

    @property
    def contract_abi(self) -> ContractAbi:
        """Gets the contract_abi of this Contract.


        :return: The contract_abi of this Contract.
        :rtype: ContractAbi
        """
        return self._contract_abi

    @contract_abi.setter
    def contract_abi(self, contract_abi: ContractAbi):
        """Sets the contract_abi of this Contract.


        :param contract_abi: The contract_abi of this Contract.
        :type contract_abi: ContractAbi
        """
        if contract_abi is None:
            raise ValueError("Invalid value for `contract_abi`, must not be `None`")  # noqa: E501

        self._contract_abi = contract_abi
