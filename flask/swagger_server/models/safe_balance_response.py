# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SafeBalanceResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, token_address: str=None, token: Erc20Info=None, balance: str=None):  # noqa: E501
        """SafeBalanceResponse - a model defined in Swagger

        :param token_address: The token_address of this SafeBalanceResponse.  # noqa: E501
        :type token_address: str
        :param token: The token of this SafeBalanceResponse.  # noqa: E501
        :type token: Erc20Info
        :param balance: The balance of this SafeBalanceResponse.  # noqa: E501
        :type balance: str
        """
        self.swagger_types = {
            'token_address': str,
            'token': Erc20Info,
            'balance': str
        }

        self.attribute_map = {
            'token_address': 'tokenAddress',
            'token': 'token',
            'balance': 'balance'
        }

        self._token_address = token_address
        self._token = token
        self._balance = balance

    @classmethod
    def from_dict(cls, dikt) -> 'SafeBalanceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SafeBalanceResponse of this SafeBalanceResponse.  # noqa: E501
        :rtype: SafeBalanceResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token_address(self) -> str:
        """Gets the token_address of this SafeBalanceResponse.


        :return: The token_address of this SafeBalanceResponse.
        :rtype: str
        """
        return self._token_address

    @token_address.setter
    def token_address(self, token_address: str):
        """Sets the token_address of this SafeBalanceResponse.


        :param token_address: The token_address of this SafeBalanceResponse.
        :type token_address: str
        """
        if token_address is None:
            raise ValueError("Invalid value for `token_address`, must not be `None`")  # noqa: E501
        if token_address is not None and len(token_address) < 1:
            raise ValueError("Invalid value for `token_address`, length must be greater than or equal to `1`")  # noqa: E501

        self._token_address = token_address

    @property
    def token(self) -> Erc20Info:
        """Gets the token of this SafeBalanceResponse.


        :return: The token of this SafeBalanceResponse.
        :rtype: Erc20Info
        """
        return self._token

    @token.setter
    def token(self, token: Erc20Info):
        """Sets the token of this SafeBalanceResponse.


        :param token: The token of this SafeBalanceResponse.
        :type token: Erc20Info
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def balance(self) -> str:
        """Gets the balance of this SafeBalanceResponse.


        :return: The balance of this SafeBalanceResponse.
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance: str):
        """Sets the balance of this SafeBalanceResponse.


        :param balance: The balance of this SafeBalanceResponse.
        :type balance: str
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501
        if balance is not None and len(balance) < 1:
            raise ValueError("Invalid value for `balance`, length must be greater than or equal to `1`")  # noqa: E501

        self._balance = balance
