# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SafeInfoResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, nonce: int=None, threshold: int=None, owners: List[str]=None, master_copy: str=None, modules: List[str]=None, fallback_handler: str=None, version: str=None):  # noqa: E501
        """SafeInfoResponse - a model defined in Swagger

        :param address: The address of this SafeInfoResponse.  # noqa: E501
        :type address: str
        :param nonce: The nonce of this SafeInfoResponse.  # noqa: E501
        :type nonce: int
        :param threshold: The threshold of this SafeInfoResponse.  # noqa: E501
        :type threshold: int
        :param owners: The owners of this SafeInfoResponse.  # noqa: E501
        :type owners: List[str]
        :param master_copy: The master_copy of this SafeInfoResponse.  # noqa: E501
        :type master_copy: str
        :param modules: The modules of this SafeInfoResponse.  # noqa: E501
        :type modules: List[str]
        :param fallback_handler: The fallback_handler of this SafeInfoResponse.  # noqa: E501
        :type fallback_handler: str
        :param version: The version of this SafeInfoResponse.  # noqa: E501
        :type version: str
        """
        self.swagger_types = {
            'address': str,
            'nonce': int,
            'threshold': int,
            'owners': List[str],
            'master_copy': str,
            'modules': List[str],
            'fallback_handler': str,
            'version': str
        }

        self.attribute_map = {
            'address': 'address',
            'nonce': 'nonce',
            'threshold': 'threshold',
            'owners': 'owners',
            'master_copy': 'masterCopy',
            'modules': 'modules',
            'fallback_handler': 'fallbackHandler',
            'version': 'version'
        }

        self._address = address
        self._nonce = nonce
        self._threshold = threshold
        self._owners = owners
        self._master_copy = master_copy
        self._modules = modules
        self._fallback_handler = fallback_handler
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'SafeInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SafeInfoResponse of this SafeInfoResponse.  # noqa: E501
        :rtype: SafeInfoResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this SafeInfoResponse.


        :return: The address of this SafeInfoResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this SafeInfoResponse.


        :param address: The address of this SafeInfoResponse.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def nonce(self) -> int:
        """Gets the nonce of this SafeInfoResponse.


        :return: The nonce of this SafeInfoResponse.
        :rtype: int
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce: int):
        """Sets the nonce of this SafeInfoResponse.


        :param nonce: The nonce of this SafeInfoResponse.
        :type nonce: int
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")  # noqa: E501

        self._nonce = nonce

    @property
    def threshold(self) -> int:
        """Gets the threshold of this SafeInfoResponse.


        :return: The threshold of this SafeInfoResponse.
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold: int):
        """Sets the threshold of this SafeInfoResponse.


        :param threshold: The threshold of this SafeInfoResponse.
        :type threshold: int
        """
        if threshold is None:
            raise ValueError("Invalid value for `threshold`, must not be `None`")  # noqa: E501

        self._threshold = threshold

    @property
    def owners(self) -> List[str]:
        """Gets the owners of this SafeInfoResponse.


        :return: The owners of this SafeInfoResponse.
        :rtype: List[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners: List[str]):
        """Sets the owners of this SafeInfoResponse.


        :param owners: The owners of this SafeInfoResponse.
        :type owners: List[str]
        """
        if owners is None:
            raise ValueError("Invalid value for `owners`, must not be `None`")  # noqa: E501

        self._owners = owners

    @property
    def master_copy(self) -> str:
        """Gets the master_copy of this SafeInfoResponse.


        :return: The master_copy of this SafeInfoResponse.
        :rtype: str
        """
        return self._master_copy

    @master_copy.setter
    def master_copy(self, master_copy: str):
        """Sets the master_copy of this SafeInfoResponse.


        :param master_copy: The master_copy of this SafeInfoResponse.
        :type master_copy: str
        """
        if master_copy is None:
            raise ValueError("Invalid value for `master_copy`, must not be `None`")  # noqa: E501

        self._master_copy = master_copy

    @property
    def modules(self) -> List[str]:
        """Gets the modules of this SafeInfoResponse.


        :return: The modules of this SafeInfoResponse.
        :rtype: List[str]
        """
        return self._modules

    @modules.setter
    def modules(self, modules: List[str]):
        """Sets the modules of this SafeInfoResponse.


        :param modules: The modules of this SafeInfoResponse.
        :type modules: List[str]
        """
        if modules is None:
            raise ValueError("Invalid value for `modules`, must not be `None`")  # noqa: E501

        self._modules = modules

    @property
    def fallback_handler(self) -> str:
        """Gets the fallback_handler of this SafeInfoResponse.


        :return: The fallback_handler of this SafeInfoResponse.
        :rtype: str
        """
        return self._fallback_handler

    @fallback_handler.setter
    def fallback_handler(self, fallback_handler: str):
        """Sets the fallback_handler of this SafeInfoResponse.


        :param fallback_handler: The fallback_handler of this SafeInfoResponse.
        :type fallback_handler: str
        """
        if fallback_handler is None:
            raise ValueError("Invalid value for `fallback_handler`, must not be `None`")  # noqa: E501

        self._fallback_handler = fallback_handler

    @property
    def version(self) -> str:
        """Gets the version of this SafeInfoResponse.


        :return: The version of this SafeInfoResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this SafeInfoResponse.


        :param version: The version of this SafeInfoResponse.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version
