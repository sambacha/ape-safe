# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ContractAbi(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, abi: List[Dict[str, str]]=None, description: str=None, relevance: int=None):  # noqa: E501
        """ContractAbi - a model defined in Swagger

        :param abi: The abi of this ContractAbi.  # noqa: E501
        :type abi: List[Dict[str, str]]
        :param description: The description of this ContractAbi.  # noqa: E501
        :type description: str
        :param relevance: The relevance of this ContractAbi.  # noqa: E501
        :type relevance: int
        """
        self.swagger_types = {
            'abi': List[Dict[str, str]],
            'description': str,
            'relevance': int
        }

        self.attribute_map = {
            'abi': 'abi',
            'description': 'description',
            'relevance': 'relevance'
        }

        self._abi = abi
        self._description = description
        self._relevance = relevance

    @classmethod
    def from_dict(cls, dikt) -> 'ContractAbi':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContractAbi of this ContractAbi.  # noqa: E501
        :rtype: ContractAbi
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abi(self) -> List[Dict[str, str]]:
        """Gets the abi of this ContractAbi.


        :return: The abi of this ContractAbi.
        :rtype: List[Dict[str, str]]
        """
        return self._abi

    @abi.setter
    def abi(self, abi: List[Dict[str, str]]):
        """Sets the abi of this ContractAbi.


        :param abi: The abi of this ContractAbi.
        :type abi: List[Dict[str, str]]
        """
        if abi is None:
            raise ValueError("Invalid value for `abi`, must not be `None`")  # noqa: E501

        self._abi = abi

    @property
    def description(self) -> str:
        """Gets the description of this ContractAbi.


        :return: The description of this ContractAbi.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ContractAbi.


        :param description: The description of this ContractAbi.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def relevance(self) -> int:
        """Gets the relevance of this ContractAbi.


        :return: The relevance of this ContractAbi.
        :rtype: int
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance: int):
        """Sets the relevance of this ContractAbi.


        :param relevance: The relevance of this ContractAbi.
        :type relevance: int
        """
        if relevance is None:
            raise ValueError("Invalid value for `relevance`, must not be `None`")  # noqa: E501

        self._relevance = relevance
