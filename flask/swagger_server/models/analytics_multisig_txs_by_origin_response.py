# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AnalyticsMultisigTxsByOriginResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, origin: str=None, transactions: int=None):  # noqa: E501
        """AnalyticsMultisigTxsByOriginResponse - a model defined in Swagger

        :param origin: The origin of this AnalyticsMultisigTxsByOriginResponse.  # noqa: E501
        :type origin: str
        :param transactions: The transactions of this AnalyticsMultisigTxsByOriginResponse.  # noqa: E501
        :type transactions: int
        """
        self.swagger_types = {
            'origin': str,
            'transactions': int
        }

        self.attribute_map = {
            'origin': 'origin',
            'transactions': 'transactions'
        }

        self._origin = origin
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt) -> 'AnalyticsMultisigTxsByOriginResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalyticsMultisigTxsByOriginResponse of this AnalyticsMultisigTxsByOriginResponse.  # noqa: E501
        :rtype: AnalyticsMultisigTxsByOriginResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin(self) -> str:
        """Gets the origin of this AnalyticsMultisigTxsByOriginResponse.


        :return: The origin of this AnalyticsMultisigTxsByOriginResponse.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin: str):
        """Sets the origin of this AnalyticsMultisigTxsByOriginResponse.


        :param origin: The origin of this AnalyticsMultisigTxsByOriginResponse.
        :type origin: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501
        if origin is not None and len(origin) < 1:
            raise ValueError("Invalid value for `origin`, length must be greater than or equal to `1`")  # noqa: E501

        self._origin = origin

    @property
    def transactions(self) -> int:
        """Gets the transactions of this AnalyticsMultisigTxsByOriginResponse.


        :return: The transactions of this AnalyticsMultisigTxsByOriginResponse.
        :rtype: int
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions: int):
        """Sets the transactions of this AnalyticsMultisigTxsByOriginResponse.


        :param transactions: The transactions of this AnalyticsMultisigTxsByOriginResponse.
        :type transactions: int
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions
