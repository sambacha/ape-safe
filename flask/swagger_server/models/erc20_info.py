# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Erc20Info(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, symbol: str=None, decimals: int=None, logo_uri: str=None):  # noqa: E501
        """Erc20Info - a model defined in Swagger

        :param name: The name of this Erc20Info.  # noqa: E501
        :type name: str
        :param symbol: The symbol of this Erc20Info.  # noqa: E501
        :type symbol: str
        :param decimals: The decimals of this Erc20Info.  # noqa: E501
        :type decimals: int
        :param logo_uri: The logo_uri of this Erc20Info.  # noqa: E501
        :type logo_uri: str
        """
        self.swagger_types = {
            'name': str,
            'symbol': str,
            'decimals': int,
            'logo_uri': str
        }

        self.attribute_map = {
            'name': 'name',
            'symbol': 'symbol',
            'decimals': 'decimals',
            'logo_uri': 'logoUri'
        }

        self._name = name
        self._symbol = symbol
        self._decimals = decimals
        self._logo_uri = logo_uri

    @classmethod
    def from_dict(cls, dikt) -> 'Erc20Info':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Erc20Info of this Erc20Info.  # noqa: E501
        :rtype: Erc20Info
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Erc20Info.


        :return: The name of this Erc20Info.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Erc20Info.


        :param name: The name of this Erc20Info.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Erc20Info.


        :return: The symbol of this Erc20Info.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Erc20Info.


        :param symbol: The symbol of this Erc20Info.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501
        if symbol is not None and len(symbol) < 1:
            raise ValueError("Invalid value for `symbol`, length must be greater than or equal to `1`")  # noqa: E501

        self._symbol = symbol

    @property
    def decimals(self) -> int:
        """Gets the decimals of this Erc20Info.


        :return: The decimals of this Erc20Info.
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals: int):
        """Sets the decimals of this Erc20Info.


        :param decimals: The decimals of this Erc20Info.
        :type decimals: int
        """
        if decimals is None:
            raise ValueError("Invalid value for `decimals`, must not be `None`")  # noqa: E501

        self._decimals = decimals

    @property
    def logo_uri(self) -> str:
        """Gets the logo_uri of this Erc20Info.


        :return: The logo_uri of this Erc20Info.
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri: str):
        """Sets the logo_uri of this Erc20Info.


        :param logo_uri: The logo_uri of this Erc20Info.
        :type logo_uri: str
        """
        if logo_uri is None:
            raise ValueError("Invalid value for `logo_uri`, must not be `None`")  # noqa: E501
        if logo_uri is not None and len(logo_uri) < 1:
            raise ValueError("Invalid value for `logo_uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._logo_uri = logo_uri
