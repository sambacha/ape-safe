# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AnalyticsMultisigTxsBySafeResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, safe: str=None, master_copy: str=None, transactions: int=None):  # noqa: E501
        """AnalyticsMultisigTxsBySafeResponse - a model defined in Swagger

        :param safe: The safe of this AnalyticsMultisigTxsBySafeResponse.  # noqa: E501
        :type safe: str
        :param master_copy: The master_copy of this AnalyticsMultisigTxsBySafeResponse.  # noqa: E501
        :type master_copy: str
        :param transactions: The transactions of this AnalyticsMultisigTxsBySafeResponse.  # noqa: E501
        :type transactions: int
        """
        self.swagger_types = {
            'safe': str,
            'master_copy': str,
            'transactions': int
        }

        self.attribute_map = {
            'safe': 'safe',
            'master_copy': 'masterCopy',
            'transactions': 'transactions'
        }

        self._safe = safe
        self._master_copy = master_copy
        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt) -> 'AnalyticsMultisigTxsBySafeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnalyticsMultisigTxsBySafeResponse of this AnalyticsMultisigTxsBySafeResponse.  # noqa: E501
        :rtype: AnalyticsMultisigTxsBySafeResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def safe(self) -> str:
        """Gets the safe of this AnalyticsMultisigTxsBySafeResponse.


        :return: The safe of this AnalyticsMultisigTxsBySafeResponse.
        :rtype: str
        """
        return self._safe

    @safe.setter
    def safe(self, safe: str):
        """Sets the safe of this AnalyticsMultisigTxsBySafeResponse.


        :param safe: The safe of this AnalyticsMultisigTxsBySafeResponse.
        :type safe: str
        """
        if safe is None:
            raise ValueError("Invalid value for `safe`, must not be `None`")  # noqa: E501

        self._safe = safe

    @property
    def master_copy(self) -> str:
        """Gets the master_copy of this AnalyticsMultisigTxsBySafeResponse.


        :return: The master_copy of this AnalyticsMultisigTxsBySafeResponse.
        :rtype: str
        """
        return self._master_copy

    @master_copy.setter
    def master_copy(self, master_copy: str):
        """Sets the master_copy of this AnalyticsMultisigTxsBySafeResponse.


        :param master_copy: The master_copy of this AnalyticsMultisigTxsBySafeResponse.
        :type master_copy: str
        """
        if master_copy is None:
            raise ValueError("Invalid value for `master_copy`, must not be `None`")  # noqa: E501

        self._master_copy = master_copy

    @property
    def transactions(self) -> int:
        """Gets the transactions of this AnalyticsMultisigTxsBySafeResponse.


        :return: The transactions of this AnalyticsMultisigTxsBySafeResponse.
        :rtype: int
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions: int):
        """Sets the transactions of this AnalyticsMultisigTxsBySafeResponse.


        :param transactions: The transactions of this AnalyticsMultisigTxsBySafeResponse.
        :type transactions: int
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions
