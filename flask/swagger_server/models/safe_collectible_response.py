# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SafeCollectibleResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, token_name: str=None, token_symbol: str=None, logo_uri: str=None, id: str=None, uri: str=None, name: str=None, description: str=None, image_uri: str=None, metadata: Dict[str, str]=None):  # noqa: E501
        """SafeCollectibleResponse - a model defined in Swagger

        :param address: The address of this SafeCollectibleResponse.  # noqa: E501
        :type address: str
        :param token_name: The token_name of this SafeCollectibleResponse.  # noqa: E501
        :type token_name: str
        :param token_symbol: The token_symbol of this SafeCollectibleResponse.  # noqa: E501
        :type token_symbol: str
        :param logo_uri: The logo_uri of this SafeCollectibleResponse.  # noqa: E501
        :type logo_uri: str
        :param id: The id of this SafeCollectibleResponse.  # noqa: E501
        :type id: str
        :param uri: The uri of this SafeCollectibleResponse.  # noqa: E501
        :type uri: str
        :param name: The name of this SafeCollectibleResponse.  # noqa: E501
        :type name: str
        :param description: The description of this SafeCollectibleResponse.  # noqa: E501
        :type description: str
        :param image_uri: The image_uri of this SafeCollectibleResponse.  # noqa: E501
        :type image_uri: str
        :param metadata: The metadata of this SafeCollectibleResponse.  # noqa: E501
        :type metadata: Dict[str, str]
        """
        self.swagger_types = {
            'address': str,
            'token_name': str,
            'token_symbol': str,
            'logo_uri': str,
            'id': str,
            'uri': str,
            'name': str,
            'description': str,
            'image_uri': str,
            'metadata': Dict[str, str]
        }

        self.attribute_map = {
            'address': 'address',
            'token_name': 'tokenName',
            'token_symbol': 'tokenSymbol',
            'logo_uri': 'logoUri',
            'id': 'id',
            'uri': 'uri',
            'name': 'name',
            'description': 'description',
            'image_uri': 'imageUri',
            'metadata': 'metadata'
        }

        self._address = address
        self._token_name = token_name
        self._token_symbol = token_symbol
        self._logo_uri = logo_uri
        self._id = id
        self._uri = uri
        self._name = name
        self._description = description
        self._image_uri = image_uri
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'SafeCollectibleResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SafeCollectibleResponse of this SafeCollectibleResponse.  # noqa: E501
        :rtype: SafeCollectibleResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this SafeCollectibleResponse.


        :return: The address of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this SafeCollectibleResponse.


        :param address: The address of this SafeCollectibleResponse.
        :type address: str
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501
        if address is not None and len(address) < 1:
            raise ValueError("Invalid value for `address`, length must be greater than or equal to `1`")  # noqa: E501

        self._address = address

    @property
    def token_name(self) -> str:
        """Gets the token_name of this SafeCollectibleResponse.


        :return: The token_name of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name: str):
        """Sets the token_name of this SafeCollectibleResponse.


        :param token_name: The token_name of this SafeCollectibleResponse.
        :type token_name: str
        """
        if token_name is None:
            raise ValueError("Invalid value for `token_name`, must not be `None`")  # noqa: E501
        if token_name is not None and len(token_name) < 1:
            raise ValueError("Invalid value for `token_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._token_name = token_name

    @property
    def token_symbol(self) -> str:
        """Gets the token_symbol of this SafeCollectibleResponse.


        :return: The token_symbol of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._token_symbol

    @token_symbol.setter
    def token_symbol(self, token_symbol: str):
        """Sets the token_symbol of this SafeCollectibleResponse.


        :param token_symbol: The token_symbol of this SafeCollectibleResponse.
        :type token_symbol: str
        """
        if token_symbol is None:
            raise ValueError("Invalid value for `token_symbol`, must not be `None`")  # noqa: E501
        if token_symbol is not None and len(token_symbol) < 1:
            raise ValueError("Invalid value for `token_symbol`, length must be greater than or equal to `1`")  # noqa: E501

        self._token_symbol = token_symbol

    @property
    def logo_uri(self) -> str:
        """Gets the logo_uri of this SafeCollectibleResponse.


        :return: The logo_uri of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri: str):
        """Sets the logo_uri of this SafeCollectibleResponse.


        :param logo_uri: The logo_uri of this SafeCollectibleResponse.
        :type logo_uri: str
        """
        if logo_uri is None:
            raise ValueError("Invalid value for `logo_uri`, must not be `None`")  # noqa: E501
        if logo_uri is not None and len(logo_uri) < 1:
            raise ValueError("Invalid value for `logo_uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._logo_uri = logo_uri

    @property
    def id(self) -> str:
        """Gets the id of this SafeCollectibleResponse.


        :return: The id of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SafeCollectibleResponse.


        :param id: The id of this SafeCollectibleResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def uri(self) -> str:
        """Gets the uri of this SafeCollectibleResponse.


        :return: The uri of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this SafeCollectibleResponse.


        :param uri: The uri of this SafeCollectibleResponse.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501
        if uri is not None and len(uri) < 1:
            raise ValueError("Invalid value for `uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._uri = uri

    @property
    def name(self) -> str:
        """Gets the name of this SafeCollectibleResponse.


        :return: The name of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SafeCollectibleResponse.


        :param name: The name of this SafeCollectibleResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this SafeCollectibleResponse.


        :return: The description of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this SafeCollectibleResponse.


        :param description: The description of this SafeCollectibleResponse.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")  # noqa: E501

        self._description = description

    @property
    def image_uri(self) -> str:
        """Gets the image_uri of this SafeCollectibleResponse.


        :return: The image_uri of this SafeCollectibleResponse.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri: str):
        """Sets the image_uri of this SafeCollectibleResponse.


        :param image_uri: The image_uri of this SafeCollectibleResponse.
        :type image_uri: str
        """
        if image_uri is None:
            raise ValueError("Invalid value for `image_uri`, must not be `None`")  # noqa: E501
        if image_uri is not None and len(image_uri) < 1:
            raise ValueError("Invalid value for `image_uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._image_uri = image_uri

    @property
    def metadata(self) -> Dict[str, str]:
        """Gets the metadata of this SafeCollectibleResponse.


        :return: The metadata of this SafeCollectibleResponse.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: Dict[str, str]):
        """Sets the metadata of this SafeCollectibleResponse.


        :param metadata: The metadata of this SafeCollectibleResponse.
        :type metadata: Dict[str, str]
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")  # noqa: E501

        self._metadata = metadata
